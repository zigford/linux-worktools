#!/bin/bash

# get volumes to snapshot
IFS=' ' vols=$(ls /mnt/btrfs/ | grep -v snapshots)
SNAPROOT=/mnt/btrfs/snapshots

# constants
_24hrs=86400
_30days=2592000
_1year=$((365 * 24 * 60 * 60))

mountvol() {
    if ! mount | grep -q "$1"
    then
        mount $1
    fi
}

fdate() {
    date +'%F-%T'
}

snapls() {
    ls "${SNAPROOT}/" -1 | grep "$1"
}

snapshot() {
    while IFS= read -r snapname
    do
        snapname=${snapname:1}
        if [ "root" == "${snapname}" ]
        then snaproot="/"
        else snaproot="/${snapname}"
        fi
        snapdest="/mnt/btrfs/snapshots/"
        [[ ! -d "${snapdest}" ]] && mkdir "${snapdest}"
        btrfs subv snapshot -r \
            "${snaproot}" \
            "${snapdest}/${snapname}-$(fdate)"
    done
}

is_snapshot_in_24_hrs() {
    snapshotdate=$(echo "$1" | awk -F'-' '{print $2"-"$3"-"$4" "$5}')
    snapshotdate=$(date --date="$snapshotdate" +"%s")
    now=$(date +"%s")
    [[ $((now - snapshotdate)) -lt $_24hrs ]] || false && true
}

monthly_in_last_year() {
    # Todo - switch awk to param expansion
    while IFS= read -r snapshotname
    do
        snapshotdate=$(echo "$snapshotname" | awk -F'-' '{print $2"-"$3"-"$4" "$5}')
        snapshotdate=$(date --date="$snapshotdate" +"%s")
        now=$(date +"%s")
        month=$(echo "$snapshotname" | awk -F'-' '{print $3}')
        if [[ $((now - snapshotdate)) -lt $_1year  ]] &&
           [[ $((now - snapshotdate)) -gt $_30days ]]
        then
            if [[ -z $lastmonth ]] || [[ "$lastmonth" != "$month" ]]
            then
                echo "$snapshotname"
                lastmonth=$month
            elif [[ "$lastmonth" == "$month" ]]
            then
                continue
            fi
        fi
    done <<<$(snapls $1)
}

list_daily_in_last_month() {
    # Todo - switch awk to param expansion
    while IFS= read -r snapshotname
    do
        snapshotdate=$(echo "$snapshotname" | awk -F'-' '{print $2"-"$3"-"$4" "$5}')
        snapshotdate=$(date --date="$snapshotdate" +"%s")
        now=$(date +"%s")
        day=$(echo "$snapshotname" | awk -F'-' '{print $4}')
        if [[ $((now - snapshotdate)) -lt $_30days ]] &&
           [[ $((now - snapshotdate)) -gt $_24hrs  ]]
        then
            if [[ -z $lastday ]] || [[ "$lastday" != "$day" ]]
            then
                echo "$snapshotname"
                lastday=$day
            elif [[ "$lastday" == "$day" ]]
            then
                continue
            fi

        fi
    done <<<$(snapls $1)
}

get_keep_snapshots() {
    monthly_in_last_year "$@"
    list_daily_in_last_month "$@"
    while IFS= read -r i
    do
        if is_snapshot_in_24_hrs $i 
        then
            echo "$i"
        fi
    done <<<"$(snapls $1)"
}

invert_list() {
    NOTLIST="$1"
    SNAPVOLUME="$2"
    while IFS= read -r snapshot
    do
        in_list=no
        while IFS= read -r keepsnap
        do
            if [[ "$keepsnap" == "$snapshot" ]]
            then
                in_list=yes
            fi
        done <<<"$NOTLIST"
        [[ "$in_list" == "no" ]] && echo "$snapshot"
    done <<<"$(snapls "$SNAPVOLUME")"
}

remove_snapshots() {
    while IFS= read -r snapshot
    do
        echo "Removing ${SNAPROOT}/$snapshot"
        btrfs subvol delete "${SNAPROOT}/$snapshot"
    done
}

prune() {
    # keeps last 24 hrs of snapshots
    # keeps daily backups for the past month
    # keeps weekly backups until disk threshold percentage is reached

    # step 1. Build a list of backups to keep
    # step 2. Invert the list
    # step 3. delete snapshots in the list
    # step 4. calculate space needed to get back to meet threshold
    # step 5. build list of snapshots from oldest to newest with their exclusive space used
    # step 6. build list of number of snapshots needed to delete to meet threshold
    # step 7. delete list of snapshots
    # step 6. delete oldest to
    while IFS= read -r snapname
    do
        s="${snapname:1}"
        invert_list "$(get_keep_snapshots "$s")" "$s" |
        remove_snapshots "$s"
    done
}

echo $vols | prune
echo $vols | snapshot
